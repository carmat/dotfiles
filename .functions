#!/usr/bin/env bash

# Simple calculator
# ====================================
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Create a new directory and enter it
# ====================================
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
# ====================================
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
# ====================================
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
# ====================================
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
# ====================================
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
# ====================================
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
# ====================================
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
# ====================================
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
# ====================================
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
# ====================================
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# ====================================
# @usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
# ====================================
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
# ====================================
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
# ====================================
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
# ====================================
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
# ====================================
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
# ====================================
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise opens the given location
# function s() {
# 	if [ $# -eq 0 ]; then
# 		subl .;
# 	else
# 		subl "$@";
# 	fi;
# }

# `a` with no arguments opens the current directory in Atom Editor, otherwise opens the given location
# function a() {
# 	if [ $# -eq 0 ]; then
# 		atom .;
# 	else
# 		atom "$@";
# 	fi;
# }

# `v` with no arguments opens the current directory in Vim, otherwise opens the given location
# function v() {
# 	if [ $# -eq 0 ]; then
# 		vim .;
# 	else
# 		vim "$@";
# 	fi;
# }

# `o` with no arguments opens the current directory, otherwise opens the given location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

## Open the current branch in browser
## ====================================
## Open the current repo & branch from the command line
## Use flags to navigate to other areas of the repo such as
## commits, branches, pull requests or issues.
## ====================================
## This is an adaptation of @jasonneylon's script.
## Source: http://jasonneylon.wordpress.com/2011/04/22/opening-github-in-your-browser-from-the-terminal/
## ====================================
## @usage: gh
## @usage: gh c
## @usage: gh pr branch-name
function gh() {
  giturl=$(git config --get remote.origin.url)
  if [ "$giturl" == "" ]
    then
     echo "Not a git repository or no remote.origin.url set"
     exit 1;
  fi

  giturl=${giturl/git\@github\.com\:/https://github.com/}
  branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
  branch="(unnamed branch)"     # detached HEAD
  branch=${branch##refs/heads/}

  if [ "$1" = "" ]; then ## default => code
    giturl=${giturl/\.git/\/tree/}
    giturl=$giturl$branch
    open $giturl
  elif [ "$1" = "h" ]; then ## h => help
    echo ""
    echo "========================================"
    echo "Did you know that 'gh' can be used as is?"
    echo "There are also some other options, listed below:"
    echo "    [h]                      => View help"
    echo "    [c]                      => View commits"
    echo "    [c {SHA}]                => View specific commit from commit SHA"
    echo "    [b]                      => View branches"
    echo "    [pr]                     => View current branch compared to master"
    echo "    [pr branch]              => View current branch compared to specified branch"
    echo "    [i]                      => View issues"
    echo "    [a]                      => View assigned issues (in dev)"
    echo "    [w]                      => View wiki"
    echo "    [s]                      => View settings"
    echo "    [p]                      => View pulse"
    echo "    [g]                      => View graphs"
    echo "    [n]                      => View network"
    echo "    [<filename.ext>]         => Open a file in it's current state in the current branch"
    echo "    [<filename.ext> 101-120] => Open a file and highlight the lines specified"
    echo "    [files]                  => Open all amended files in their current state in the current branch"
    echo "========================================"
    echo ""
  elif [ "$1" = "c" ]; then ## c => commits
    if [ "$2" ]; then
      giturl=${giturl/\.git/\/commit/$2}
    else
      giturl=${giturl/\.git/\/commits/}
      giturl=$giturl$branch
    fi
    open $giturl
  elif [ "$1" = "b" ]; then ## b => branches
    giturl=${giturl/\.git/\/branches}
    open $giturl
  elif [ "$1" = "pr" ]; then ## pr => pull requests
    if [[ -z "$2" ]]; then
      # if a branch has not been specified, compare with master
      giturl=${giturl/\.git/\/compare/$branch?expand=1}
    else
      # if a branch has been specified, compare with current branch
      giturl=${giturl/\.git/\/compare/$2...$branch?expand=1}
    fi
    open $giturl
  elif [ "$1" = "i" ]; then ## i => issues
    giturl=${giturl/\.git/\/issues}
    open $giturl
  # This would be incredibly useful when I have the time
  # elif [ "$1" = "a" ]; then ## a => assigned issues
  #   giturl=${giturl/\.git/\/issues/assigned/$github_user}
  #   open $giturl
  elif [ "$1" = "w" ]; then ## w => wiki
    giturl=${giturl/\.git/\/wiki}
    open $giturl
  elif [ "$1" = "s" ]; then ## w => settings
    giturl=${giturl/\.git/\/settings}
    open $giturl
  elif [ "$1" = "p" ]; then ## w => pulse
    giturl=${giturl/\.git/\/pulse}
    open $giturl
  elif [ "$1" = "g" ]; then ## w => graphs
    giturl=${giturl/\.git/\/graphs}
    open $giturl
  elif [ "$1" = "n" ]; then ## w => network
    giturl=${giturl/\.git/\/network}
    open $giturl
  elif [ -f "$1" ]; then ## <filename.ext>
    lines=""

    if [[ "$2" && "$2" =~ ^-?[0-9]+$ ]]; then ## check if a line number has been specified
      linefrom=$2

      if [[ "$3" && "$3" =~ ^-?[0-9]+$ ]]; then ## check if a second line number has been specified
        lineto=$3
      fi

      if ( $linefrom && $lineto ); then
        if ( $lineto -gt $linefrom ); then
          lines="#L${linefrom}-${lineto}"
        elif ( $linefrom -gt $lineto ); then
          lines="#L${lineto}-${linefrom}"
        elif ( $lineto -eq $linefrom ); then
          lines="#L${linefrom}"
        fi
      elif ( $linefrom ); then
        lines="#L${linefrom}"
      fi
    fi

    giturl=${giturl/\.git/\/blob/$branch/$1$lines}
    open $giturl
  # elif [ "$1" = "all" ]; then ## w => files
  #   modified_count=$(ls -l $MODIFIED | wc -l)

  #   mod_array=($MODIFIED)
  #   IFS=' ' read -a array <<< "$MODIFIED"
  #   for file in "${array[@]}"
  #   do
  #     echo "$file"
  #   done
  else
    echo ""
    echo "========================================"
    echo "That option is invalid."
    echo "Did you mean:"
    echo "    [h]                      => View help"
    echo "    [c]                      => View commits"
    echo "    [c {SHA}]                => View specific commit from commit SHA"
    echo "    [b]                      => View branches"
    echo "    [pr]                     => View current branch compared to master"
    echo "    [pr branch]              => View current branch compared to specified branch"
    echo "    [i]                      => View issues"
    echo "    [a]                      => View assigned issues (in dev)"
    echo "    [w]                      => View wiki"
    echo "    [s]                      => View settings"
    echo "    [p]                      => View pulse"
    echo "    [g]                      => View graphs"
    echo "    [n]                      => View network"
    echo "    [<filename.ext>]         => Open a file in it's current state in the current branch"
    echo "    [<filename.ext> 101-120] => Open a file and highlight the lines specified"
    echo "    [files]                  => Open all amended files in their current state in the current branch"
    echo "========================================"
    echo ""
  fi
}

## Open a saved git-stash in IDE
## ====================================
## Open a specific git stash in a text editor of choice.
## Ideally, open the stash with color-coded text background,
## i.e. deletions, -> bg = red, additions -> bg = green
## ====================================
## @usage: gst
## @usage: gst 2
function gst() {
  if [ "$1" = "" ]; then ## default => code
    git stash show -p stash@{0}
  else
    git stash show -p stash@{$1}
  fi
}

## Create Markdown note
## ====================================
# function note() {
#     local target_dir="$HOME/Notes"
#     local timestamp=$(date +"%Y%M%d")
#     local filepath="$target_dir/$timestamp-$1.md"

#     # make a new `~/Notes` directory if it doesn't exist
#     mkdir -p $target_dir

#     # create a new file in `~/Notes`
#     touch $filepath

#     # open the new file in Sublime
#     subl $filepath
# }
